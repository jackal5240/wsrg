plugins {
    id "org.springframework.boot" version "2.0.3.RELEASE"
    id "ru.vyarus.mkdocs" version "1.0.1"
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'
apply plugin: 'application'
apply from: 'ogloba-repository.gradle'

group = 'com.ogloba'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_1_8
[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

mainClassName='com.ogloba.ew.wsrg.EwWsrgApplication'

jar.enabled = true
war.enabled = true
bootJar.classifier = 'boot'
bootWar.classifier = 'boot'

repositories {
	mavenCentral()
}

configurations {
	providedRuntime
    runtimeAgent
//	compile.exclude module: 'spring-boot-starter-logging'
}

dependencies {
    compile('io.springfox:springfox-swagger2:2.7.0')
	compile('io.springfox:springfox-swagger-ui:2.7.0')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
	compile 'org.springframework.boot:spring-boot-starter-mail'
	compile('org.springframework.boot:spring-boot-starter-jdbc')
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	compile("org.springframework.boot:spring-boot-starter-aop")
	compile("org.springframework:spring-aspects")
    compile "org.springframework:spring-instrument"
	compile "com.oracle:ojdbc8:12.2.0.1"
	compile 'org.codehaus.janino:janino:3.0.8'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8'
	
    compile (group: 'com.woodoos', name: 'jap-common', version: '2.0-SNAPSHOT') {
        exclude(module: 'commons-codec')\
        exclude(module: 'commons-logging')
        exclude(module: 'mybatis-spring')
        exclude(module: 'mybatis')
        exclude(group: 'org.springframework')
        exclude(group: 'org.slf4j')
        exclude(group: 'log4j')
        exclude(group: 'javax.servlet')
    }
    compile(group: 'ew-common', name: 'ew-common', version:'2.0.0-SNAPSHOT') {
        exclude(module: 'commons-codec')
        exclude(module: 'mybatis-spring')
        exclude(module: 'mybatis')
        exclude(group: 'org.springframework')
        exclude(group: 'org.slf4j')
        exclude(group: 'log4j')
        exclude(module: 'commons-logging')
        exclude(group: 'javax.servlet')
    }
    
    compile(group: 'ew-wsc', name: 'ew-wsc', version:'0.0.1-SNAPSHOT'){
        exclude(group: 'org.springframework')
        exclude(group: 'org.slf4j')
        exclude(group: 'log4j')
        exclude(group: 'io.swagger')
        exclude(group: 'ew-hub-common')
   		exclude(module: 'ew-common')
    	exclude(group: 'javax.servlet')
    	exclude(module: 'asm')
        exclude(module: 'commons-logging')
    }
    compileOnly "org.springframework.boot:spring-boot-configuration-processor"
    
    runtimeAgent("org.aspectj:aspectjweaver")
    runtimeAgent("org.springframework:spring-instrument")
}

//It's needed that mkdocs version to 0.17.5 to used with mkdocs gradle plugin
python {
    pip 'mkdocs:0.17.5'
}

distributions {
    main {
        contents {
            //Make sure the scripts in bin/ executable
            filesMatching("bin/*") {
                it.mode 0744
            }

            //Include mkdocs doc in dist
            from(mkdocsBuild) {
                into "doc/guide"
            }

            from(javadoc) {
                into "doc/javadoc"
            }
        }
    }
}

//
task guideJar(type: Jar) {
    group "documentation"
    classifier "resource.guide"
    from mkdocsBuild {
        into "META-INF/$project.name/doc/guide"
    }
}

task javadocJar(type: Jar) {
    group "documentation"
    classifier "resource.javadoc"
    from javadoc {
        into "META-INF/$project.name/doc/javadoc"
    }
}

[run, bootRun, distZip, bootDistZip, distTar,bootDistTar, installDist, installBootDist]*.dependsOn guideJar, javadocJar

//FIXME: Add aspejctweaving.jar as jvm agent
project.configurations.runtimeAgent.resolvedConfiguration.resolvedArtifacts.each { artifact ->
    project.applicationDefaultJvmArgs += "-javaagent:MY_APP_HOME/lib/${artifact.file.name}"
    [run, bootRun].each { task ->
        task.jvmArgs "-javaagent:${artifact.file.absolutePath}"
    }
}

//This setting is needed for agent jar path at runtime: -javaagent:MY_APP_HOME/lib/${artifact.file.name}
startScripts {
    doLast {
        unixScript.text = unixScript.text.replace('MY_APP_HOME', '\$APP_HOME')
        windowsScript.text = windowsScript.text.replace('MY_APP_HOME', '%~dp0..')
    }
}